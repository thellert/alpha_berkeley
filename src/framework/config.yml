# Framework Core Configuration
# This file contains configuration for essential framework services
# that are needed for the basic operation of the Agentic Framework

# Framework Service Deployment Control
# Enable framework services by uncommenting them below.
# The main config.yml can override these settings for convenience.
deployed_services:
  - framework.jupyter          # Python execution environment with EPICS support
  - framework.open_webui       # Primary user interface frontend  
  - framework.pipelines        # Processing pipeline infrastructure
  # - framework.langfuse         # Observability and tracing infrastructure

framework:
  # Framework Services - Essential for framework operation
  services:
    jupyter:
      path: ./services/framework/jupyter
      containers:
        read:
          name: jupyter-read
          hostname: jupyter-read
          port_host: 8088
          port_container: 8088
          execution_modes: ["read_only"]
        write:
          name: jupyter-write
          hostname: jupyter-write
          port_host: 8089
          port_container: 8088
          execution_modes: ["write_access"]
      copy_src: true
      render_kernel_templates: true

    open_webui:
      path: ./services/framework/open-webui
      hostname: appsdev2
      port_host: 8080
      port_container: 8080

    langfuse:
      path: ./services/framework/langfuse

    pipelines:
      path: ./services/framework/pipelines
      port_host: 9099
      port_container: 9099
      copy_src: true
      additional_dirs:
        - interfaces

  # Framework Model Configurations (domain-agnostic)
  models:
    orchestrator:
      provider: cborg
      model_id: anthropic/claude-sonnet
    response:
      provider: cborg
      model_id: google/gemini-flash
      max_tokens: 5000
    classifier:
      provider: cborg
      model_id: google/gemini-flash
    approval:
      provider: cborg
      model_id: google/gemini-flash
    task_extraction:
      provider: cborg
      model_id: google/gemini-flash
      max_tokens: 1024
    memory:
      provider: cborg
      model_id: google/gemini-flash
      max_tokens: 256
    python_code_generator:
      provider: cborg
      model_id: anthropic/claude-haiku # claude-sonnet
      max_tokens: 4096
    time_parsing:
      provider: cborg
      model_id: google/gemini-flash
      max_tokens: 512



  # Framework execution configuration - Technical implementation details
  execution:
    # Execution method: container-based execution for safety and isolation
    execution_method: "local"  # "container" | "local" - How to execute Python code
    
    # Simple Python environment configuration for local execution
    python_env_path: ${LOCAL_PYTHON_VENV}  # Path to Python executable with required dependencies
                                           # Example: "/path/to/venv/bin/python" or "~/jupyter-env/bin/python"
                                           # If null, uses current system Python (may miss dependencies)
    
    # EPICS Infrastructure - Technical connection details
    epics:
      timeout: 5.0
      gateways:
        read_only:
          address: cagw-alsdmz.als.lbl.gov
          port: 5064
        write_access:
          address: cagw-alsdmz.als.lbl.gov
          port: 5084
    

    
    # Python/Jupyter Execution Modes - Technical kernel configurations
    modes:
      read_only:
        kernel_name: "python3-epics-readonly"
        gateway: "read_only"
        allows_writes: false
        environment:
          EPICS_CA_AUTO_ADDR_LIST: "NO"
          EPICS_EXECUTION_MODE: "read_only"
          
      write_access:
        kernel_name: "python3-epics-write"
        gateway: "write_access"
        allows_writes: true
        requires_approval: true
        environment:
          EPICS_CA_AUTO_ADDR_LIST: "NO"
          EPICS_EXECUTION_MODE: "write_access"


  # Default Framework Pipeline Configuration
  # This provides a fallback when no application is registered
  pipeline:
    name: "Generic AI Agent Framework"
    startup_hooks: []  # No startup hooks by default 
    
# ============================================================
# Logging Configuration - Framework-specific technical details
# ============================================================

logging:
  # Framework capability colors
  framework:
    logging_colors:
      # Core system components
      base: 'white'
      context: "light_steel_blue1"
      router: "bright_magenta"
      orchestrator: "cyan"
      monitor: "dark_orange3"
      classifier: "light_salmon1"
      task_extraction: "thistle1"
      error: "red"
      gateway: "light_salmon1"
      approval: "light_salmon1"
            
      # Framework capabilities
      time_range_parsing: "dodger_blue1"
      memory: "light_salmon1"
      python: "light_salmon1"
      
      # Communication capabilities
      respond: "thistle1"
      clarify: "thistle1"
      message_generator: "thistle1"
      
      # Execution infrastructure
      # TODO: cleanup
      python_generator: "sandy_brown"
      python_analyzer: "salmon1"
      python_executor: "misty_rose1"
      python_workflow: "light_steel_blue1"
      python_services: "light_steel_blue1"

  # Interface component colors
  interface:
    logging_colors:
      # User interface components
      cli: "deep_sky_blue1"
      pipeline: "deep_sky_blue1"
