volumes:
  langfuse_postgres_data:
  langfuse_clickhouse_data:
  langfuse_minio_data:

services:
  postgres:
    container_name: postgres
    image: postgres:15
    restart: unless-stopped
    ports:
      - 5432:5432 # todo config
    environment:
      POSTGRES_USER: langfuse
      POSTGRES_PASSWORD: langfuse
      POSTGRES_DB: langfuse
      NO_PROXY: ${NO_PROXY}
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "langfuse"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - als-agents-network

  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server:latest
    restart: unless-stopped
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native client protocol
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
      NO_PROXY: ${NO_PROXY}
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "sh", "-c", "clickhouse-client --user clickhouse --password clickhouse --query 'SELECT 1'"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - als-agents-network

  redis:
    container_name: redis
    image: redis:7
    restart: unless-stopped
    ports:
      - 127.0.0.1:6379:6379 # todo config
    command: >
      --requirepass myredissecret
    environment:
      NO_PROXY: ${NO_PROXY}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    networks:
      - als-agents-network

  minio:
    container_name: minio
    image: minio/minio
    restart: unless-stopped
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server /data --console-address ":9001"'
    ports:
      - "9090:9000"  # S3 API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret # CHANGEME
      NO_PROXY: ${NO_PROXY}
    volumes:
      - langfuse_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s
    networks:
      - als-agents-network

  langfuse-worker:
    container_name: langfuse_worker
    image: langfuse/langfuse-worker:3
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    ports:
      - 3030:3030 # todo config
    environment: &langfuse-worker-env
      DATABASE_URL: postgres://langfuse:langfuse@postgres:5432/langfuse
      SALT: "mysalt" # CHANGEME
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000" # CHANGEME: generate via `openssl rand -hex 32`
      LANGFUSE_EE_LICENSE_KEY: 'langfuse_ee_cm9rj40it0000i5mz78mg5daw_lbl-berkeley'
      TELEMETRY_ENABLED: "true"
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "true"
      CLICKHOUSE_MIGRATION_URL: clickhouse://clickhouse:9000
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse # CHANGEME
      CLICKHOUSE_CLUSTER_ENABLED: "false"
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_EVENT_UPLOAD_REGION: auto
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: miniosecret # CHANGEME
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: events/
      LANGFUSE_S3_MEDIA_UPLOAD_BUCKET: langfuse
      LANGFUSE_S3_MEDIA_UPLOAD_REGION: auto
      LANGFUSE_S3_MEDIA_UPLOAD_ACCESS_KEY_ID: minio
      LANGFUSE_S3_MEDIA_UPLOAD_SECRET_ACCESS_KEY: miniosecret # CHANGEME
      LANGFUSE_S3_MEDIA_UPLOAD_ENDPOINT: http://minio:9000
      LANGFUSE_S3_MEDIA_UPLOAD_FORCE_PATH_STYLE: "true"
      LANGFUSE_S3_MEDIA_UPLOAD_PREFIX: media/
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: "false"
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: langfuse
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: exports/
      LANGFUSE_S3_BATCH_EXPORT_REGION: auto
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: http://minio:9000
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: http://localhost:9090
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: minio
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: miniosecret # CHANGEME
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: "true"
      LANGFUSE_INGESTION_QUEUE_DELAY_MS: ""
      LANGFUSE_INGESTION_CLICKHOUSE_WRITE_INTERVAL_MS: ""
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_AUTH: myredissecret # CHANGEME
      REDIS_TLS_ENABLED: "false"
      REDIS_TLS_CA: /certs/ca.crt
      REDIS_TLS_CERT: /certs/redis.crt
      REDIS_TLS_KEY: /certs/redis.key
      # Timezone synchronization with host (from system configuration)
      TZ: {{system.timezone}}
      NO_PROXY: ${NO_PROXY}
    networks:
      - als-agents-network

  langfuse-web:
    container_name: langfuse-web
    image: ghcr.io/langfuse/langfuse:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
        <<: *langfuse-worker-env
        NEXTAUTH_URL: http://localhost:3001
        NEXTAUTH_SECRET: mysecret # CHANGEME
        LANGFUSE_INIT_ORG_ID: ""
        LANGFUSE_INIT_ORG_NAME: ""
        LANGFUSE_INIT_PROJECT_ID: ""
        LANGFUSE_INIT_PROJECT_NAME: ""
        LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ""
        LANGFUSE_INIT_PROJECT_SECRET_KEY: ""
        LANGFUSE_INIT_USER_EMAIL: ""
        LANGFUSE_INIT_USER_NAME: ""
        LANGFUSE_INIT_USER_PASSWORD: ""
        NO_PROXY: ${NO_PROXY}
        HTTP_PROXY: ""
        HTTPS_PROXY: ""
        http_proxy: ""
        https_proxy: ""
    networks:
      - als-agents-network

